// wagmi.config.ts
import { defineConfig } from "@wagmi/cli";
import fs from "fs";
import path from "path";
var dirEntries = [];
var deploymentsDir = path.join("..", "contracts", "ignition", "deployments");
try {
  dirEntries.push(
    ...fs.readdirSync(deploymentsDir, { recursive: true, withFileTypes: true })
  );
} catch (e) {
  if (!(e instanceof Error && "code" in e && e.code === "ENOENT")) {
    throw e;
  }
  console.warn(`No contracts found in ${deploymentsDir}. Deploy one first.`);
  process.exit(1);
}
var deployedAddressesEntries = dirEntries.filter((entry) => entry.name === "deployed_addresses.json");
var artifactEntries = dirEntries.filter(
  (entry) => entry.isFile() && entry.parentPath.includes("artifacts") && entry.name.endsWith(".json") && !entry.name.endsWith(".dbg.json")
);
if (artifactEntries.length === 0) {
  console.warn(`No contracts found in ${deploymentsDir}. Deploy one first.`);
  process.exit(1);
}
var abisByContractName = {};
for (const entry of artifactEntries) {
  const fileContents = fs.readFileSync(path.join(entry.parentPath, entry.name), "utf-8");
  const abi = JSON.parse(fileContents).abi;
  abisByContractName[entry.name.replace(/\.json$/, "")] = abi;
}
var deployedContracts = {};
var chainIdRegex = /(chain-)(\d+)/;
for (const entry of deployedAddressesEntries) {
  const chainId = entry.parentPath.match(chainIdRegex)?.[2];
  if (!chainId) {
    throw new Error(`chainId is missing in path ${entry.parentPath}`);
  }
  const fileContents = fs.readFileSync(path.join(entry.parentPath, entry.name), "utf-8");
  for (const [name, address] of Object.entries(JSON.parse(fileContents))) {
    const abi = abisByContractName[name];
    if (!abi) {
      throw new Error(`Can't find abi for deployed contract ${name} in chain ${chainId}`);
    }
    if (!deployedContracts[name]) deployedContracts[name] = { name, abi, address: {} };
    const addressMap = deployedContracts[name].address;
    addressMap[parseInt(chainId)] = address;
  }
}
if (process.env.DEBUG === "1") {
  console.log("deployedAddressesEntries", deployedAddressesEntries);
  console.log("artifactEntries", artifactEntries);
  console.log("deployedAddresses", deployedContracts);
}
var wagmi_config_default = defineConfig({
  out: "src/generated.ts",
  contracts: Object.values(deployedContracts),
  plugins: []
});
export {
  wagmi_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsid2FnbWkuY29uZmlnLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIkM6XFxcXFVzZXJzXFxcXFVzZXJcXFxcRGVza3RvcFxcXFxTZWN1cmVTY291dFxcXFxmcm9udGVuZFxcXFx3YWdtaS5jb25maWcudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiQzpcXFxcVXNlcnNcXFxcVXNlclxcXFxEZXNrdG9wXFxcXFNlY3VyZVNjb3V0XFxcXGZyb250ZW5kXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9DOi9Vc2Vycy9Vc2VyL0Rlc2t0b3AvU2VjdXJlU2NvdXQvZnJvbnRlbmQvd2FnbWkuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnLCBDb250cmFjdENvbmZpZyB9IGZyb20gXCJAd2FnbWkvY2xpXCI7XG5pbXBvcnQgeyBBYmkgfSBmcm9tIFwidmllbVwiO1xuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcblxubGV0IGRpckVudHJpZXM6IGZzLkRpcmVudFtdID0gW107XG5cbmNvbnN0IGRlcGxveW1lbnRzRGlyID0gcGF0aC5qb2luKFwiLi5cIiwgXCJjb250cmFjdHNcIiwgXCJpZ25pdGlvblwiLCBcImRlcGxveW1lbnRzXCIpO1xuXG50cnkge1xuICBkaXJFbnRyaWVzLnB1c2goXG4gICAgLi4uZnMucmVhZGRpclN5bmMoZGVwbG95bWVudHNEaXIsIHsgcmVjdXJzaXZlOiB0cnVlLCB3aXRoRmlsZVR5cGVzOiB0cnVlIH0pXG4gICk7XG59IGNhdGNoIChlOiB1bmtub3duKSB7XG4gIGlmICghKGUgaW5zdGFuY2VvZiBFcnJvciAmJiBcImNvZGVcIiBpbiBlICYmIGUuY29kZSA9PT0gXCJFTk9FTlRcIikpIHtcbiAgICB0aHJvdyBlO1xuICB9XG5cbiAgY29uc29sZS53YXJuKGBObyBjb250cmFjdHMgZm91bmQgaW4gJHtkZXBsb3ltZW50c0Rpcn0uIERlcGxveSBvbmUgZmlyc3QuYCk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn1cblxuY29uc3QgZGVwbG95ZWRBZGRyZXNzZXNFbnRyaWVzID0gZGlyRW50cmllcy5maWx0ZXIoKGVudHJ5KSA9PiBlbnRyeS5uYW1lID09PSBcImRlcGxveWVkX2FkZHJlc3Nlcy5qc29uXCIpO1xuXG5jb25zdCBhcnRpZmFjdEVudHJpZXMgPSBkaXJFbnRyaWVzLmZpbHRlcihcbiAgKGVudHJ5KSA9PiBlbnRyeS5pc0ZpbGUoKSAmJiBlbnRyeS5wYXJlbnRQYXRoLmluY2x1ZGVzKFwiYXJ0aWZhY3RzXCIpICYmIGVudHJ5Lm5hbWUuZW5kc1dpdGgoXCIuanNvblwiKSAmJiAhZW50cnkubmFtZS5lbmRzV2l0aChcIi5kYmcuanNvblwiKVxuKTtcblxuaWYgKGFydGlmYWN0RW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgY29uc29sZS53YXJuKGBObyBjb250cmFjdHMgZm91bmQgaW4gJHtkZXBsb3ltZW50c0Rpcn0uIERlcGxveSBvbmUgZmlyc3QuYCk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn1cblxuY29uc3QgYWJpc0J5Q29udHJhY3ROYW1lOiBSZWNvcmQ8c3RyaW5nLCBBYmk+ID0ge307XG5cbmZvciAoY29uc3QgZW50cnkgb2YgYXJ0aWZhY3RFbnRyaWVzKSB7XG4gIGNvbnN0IGZpbGVDb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZW50cnkucGFyZW50UGF0aCwgZW50cnkubmFtZSksIFwidXRmLThcIik7XG4gIGNvbnN0IGFiaSA9IEpTT04ucGFyc2UoZmlsZUNvbnRlbnRzKS5hYmkgYXMgQWJpO1xuXG4gIGFiaXNCeUNvbnRyYWN0TmFtZVtlbnRyeS5uYW1lLnJlcGxhY2UoL1xcLmpzb24kLywgXCJcIildID0gYWJpO1xufVxuXG50eXBlIENvbnRyYWN0TmFtZSA9IHN0cmluZztcbmNvbnN0IGRlcGxveWVkQ29udHJhY3RzOiBSZWNvcmQ8Q29udHJhY3ROYW1lLCBDb250cmFjdENvbmZpZz4gPSB7fTtcblxuY29uc3QgY2hhaW5JZFJlZ2V4ID0gLyhjaGFpbi0pKFxcZCspLztcbmZvciAoY29uc3QgZW50cnkgb2YgZGVwbG95ZWRBZGRyZXNzZXNFbnRyaWVzKSB7XG4gIGNvbnN0IGNoYWluSWQgPSBlbnRyeS5wYXJlbnRQYXRoLm1hdGNoKGNoYWluSWRSZWdleCk/LlsyXTtcbiAgaWYgKCFjaGFpbklkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBjaGFpbklkIGlzIG1pc3NpbmcgaW4gcGF0aCAke2VudHJ5LnBhcmVudFBhdGh9YCk7XG4gIH1cbiAgY29uc3QgZmlsZUNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihlbnRyeS5wYXJlbnRQYXRoLCBlbnRyeS5uYW1lKSwgXCJ1dGYtOFwiKTtcblxuICBmb3IgKGNvbnN0IFtuYW1lLCBhZGRyZXNzXSBvZiBPYmplY3QuZW50cmllcyhKU09OLnBhcnNlKGZpbGVDb250ZW50cykpIGFzIFtDb250cmFjdE5hbWUsIGAweCR7c3RyaW5nfWBdW10pIHtcblxuICAgIGNvbnN0IGFiaSA9IGFiaXNCeUNvbnRyYWN0TmFtZVtuYW1lXTtcbiAgICBpZiAoIWFiaSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBmaW5kIGFiaSBmb3IgZGVwbG95ZWQgY29udHJhY3QgJHtuYW1lfSBpbiBjaGFpbiAke2NoYWluSWR9YCk7XG4gICAgfVxuXG4gICAgaWYgKCFkZXBsb3llZENvbnRyYWN0c1tuYW1lXSkgZGVwbG95ZWRDb250cmFjdHNbbmFtZV0gPSB7IG5hbWUsIGFiaSwgYWRkcmVzczoge30gfTtcbiAgICBjb25zdCBhZGRyZXNzTWFwID0gZGVwbG95ZWRDb250cmFjdHNbbmFtZV0uYWRkcmVzcyEgYXMgUmVjb3JkPG51bWJlciwgYDB4JHtzdHJpbmd9YD47XG4gICAgYWRkcmVzc01hcFtwYXJzZUludChjaGFpbklkKV0gPSBhZGRyZXNzO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5ERUJVRyA9PT0gXCIxXCIpIHtcbiAgY29uc29sZS5sb2coXCJkZXBsb3llZEFkZHJlc3Nlc0VudHJpZXNcIiwgZGVwbG95ZWRBZGRyZXNzZXNFbnRyaWVzKTtcbiAgY29uc29sZS5sb2coXCJhcnRpZmFjdEVudHJpZXNcIiwgYXJ0aWZhY3RFbnRyaWVzKTtcbiAgY29uc29sZS5sb2coXCJkZXBsb3llZEFkZHJlc3Nlc1wiLCBkZXBsb3llZENvbnRyYWN0cyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIG91dDogXCJzcmMvZ2VuZXJhdGVkLnRzXCIsIGNvbnRyYWN0czogT2JqZWN0LnZhbHVlcyhkZXBsb3llZENvbnRyYWN0cyksIHBsdWdpbnM6IFtdXG59KTtcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBMFIsU0FBUyxvQkFBb0M7QUFFdlUsT0FBTyxRQUFRO0FBQ2YsT0FBTyxVQUFVO0FBRWpCLElBQUksYUFBMEIsQ0FBQztBQUUvQixJQUFNLGlCQUFpQixLQUFLLEtBQUssTUFBTSxhQUFhLFlBQVksYUFBYTtBQUU3RSxJQUFJO0FBQ0YsYUFBVztBQUFBLElBQ1QsR0FBRyxHQUFHLFlBQVksZ0JBQWdCLEVBQUUsV0FBVyxNQUFNLGVBQWUsS0FBSyxDQUFDO0FBQUEsRUFDNUU7QUFDRixTQUFTLEdBQVk7QUFDbkIsTUFBSSxFQUFFLGFBQWEsU0FBUyxVQUFVLEtBQUssRUFBRSxTQUFTLFdBQVc7QUFDL0QsVUFBTTtBQUFBLEVBQ1I7QUFFQSxVQUFRLEtBQUsseUJBQXlCLGNBQWMscUJBQXFCO0FBQ3pFLFVBQVEsS0FBSyxDQUFDO0FBQ2hCO0FBRUEsSUFBTSwyQkFBMkIsV0FBVyxPQUFPLENBQUMsVUFBVSxNQUFNLFNBQVMseUJBQXlCO0FBRXRHLElBQU0sa0JBQWtCLFdBQVc7QUFBQSxFQUNqQyxDQUFDLFVBQVUsTUFBTSxPQUFPLEtBQUssTUFBTSxXQUFXLFNBQVMsV0FBVyxLQUFLLE1BQU0sS0FBSyxTQUFTLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxTQUFTLFdBQVc7QUFDekk7QUFFQSxJQUFJLGdCQUFnQixXQUFXLEdBQUc7QUFDaEMsVUFBUSxLQUFLLHlCQUF5QixjQUFjLHFCQUFxQjtBQUN6RSxVQUFRLEtBQUssQ0FBQztBQUNoQjtBQUVBLElBQU0scUJBQTBDLENBQUM7QUFFakQsV0FBVyxTQUFTLGlCQUFpQjtBQUNuQyxRQUFNLGVBQWUsR0FBRyxhQUFhLEtBQUssS0FBSyxNQUFNLFlBQVksTUFBTSxJQUFJLEdBQUcsT0FBTztBQUNyRixRQUFNLE1BQU0sS0FBSyxNQUFNLFlBQVksRUFBRTtBQUVyQyxxQkFBbUIsTUFBTSxLQUFLLFFBQVEsV0FBVyxFQUFFLENBQUMsSUFBSTtBQUMxRDtBQUdBLElBQU0sb0JBQTBELENBQUM7QUFFakUsSUFBTSxlQUFlO0FBQ3JCLFdBQVcsU0FBUywwQkFBMEI7QUFDNUMsUUFBTSxVQUFVLE1BQU0sV0FBVyxNQUFNLFlBQVksSUFBSSxDQUFDO0FBQ3hELE1BQUksQ0FBQyxTQUFTO0FBQ1osVUFBTSxJQUFJLE1BQU0sOEJBQThCLE1BQU0sVUFBVSxFQUFFO0FBQUEsRUFDbEU7QUFDQSxRQUFNLGVBQWUsR0FBRyxhQUFhLEtBQUssS0FBSyxNQUFNLFlBQVksTUFBTSxJQUFJLEdBQUcsT0FBTztBQUVyRixhQUFXLENBQUMsTUFBTSxPQUFPLEtBQUssT0FBTyxRQUFRLEtBQUssTUFBTSxZQUFZLENBQUMsR0FBc0M7QUFFekcsVUFBTSxNQUFNLG1CQUFtQixJQUFJO0FBQ25DLFFBQUksQ0FBQyxLQUFLO0FBQ1IsWUFBTSxJQUFJLE1BQU0sd0NBQXdDLElBQUksYUFBYSxPQUFPLEVBQUU7QUFBQSxJQUNwRjtBQUVBLFFBQUksQ0FBQyxrQkFBa0IsSUFBSSxFQUFHLG1CQUFrQixJQUFJLElBQUksRUFBRSxNQUFNLEtBQUssU0FBUyxDQUFDLEVBQUU7QUFDakYsVUFBTSxhQUFhLGtCQUFrQixJQUFJLEVBQUU7QUFDM0MsZUFBVyxTQUFTLE9BQU8sQ0FBQyxJQUFJO0FBQUEsRUFDbEM7QUFDRjtBQUVBLElBQUksUUFBUSxJQUFJLFVBQVUsS0FBSztBQUM3QixVQUFRLElBQUksNEJBQTRCLHdCQUF3QjtBQUNoRSxVQUFRLElBQUksbUJBQW1CLGVBQWU7QUFDOUMsVUFBUSxJQUFJLHFCQUFxQixpQkFBaUI7QUFDcEQ7QUFFQSxJQUFPLHVCQUFRLGFBQWE7QUFBQSxFQUMxQixLQUFLO0FBQUEsRUFBb0IsV0FBVyxPQUFPLE9BQU8saUJBQWlCO0FBQUEsRUFBRyxTQUFTLENBQUM7QUFDbEYsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
