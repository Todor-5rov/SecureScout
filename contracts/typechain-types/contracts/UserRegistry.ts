/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace UserRegistry {
  export type AgentStruct = {
    walletAddress: AddressLike;
    name: string;
    email: string;
    serviceType: string;
    priceInPAS: BigNumberish;
    location: string;
    completedJobs: BigNumberish;
    totalEarnings: BigNumberish;
    averageRating: BigNumberish;
    totalRatings: BigNumberish;
    isAvailable: boolean;
    isActive: boolean;
  };

  export type AgentStructOutput = [
    walletAddress: string,
    name: string,
    email: string,
    serviceType: string,
    priceInPAS: bigint,
    location: string,
    completedJobs: bigint,
    totalEarnings: bigint,
    averageRating: bigint,
    totalRatings: bigint,
    isAvailable: boolean,
    isActive: boolean
  ] & {
    walletAddress: string;
    name: string;
    email: string;
    serviceType: string;
    priceInPAS: bigint;
    location: string;
    completedJobs: bigint;
    totalEarnings: bigint;
    averageRating: bigint;
    totalRatings: bigint;
    isAvailable: boolean;
    isActive: boolean;
  };

  export type ScoutStruct = {
    walletAddress: AddressLike;
    displayName: string;
    email: string;
    location: string;
    totalJobsPosted: BigNumberish;
    totalSpent: BigNumberish;
    averageRating: BigNumberish;
    totalRatings: BigNumberish;
    isActive: boolean;
  };

  export type ScoutStructOutput = [
    walletAddress: string,
    displayName: string,
    email: string,
    location: string,
    totalJobsPosted: bigint,
    totalSpent: bigint,
    averageRating: bigint,
    totalRatings: bigint,
    isActive: boolean
  ] & {
    walletAddress: string;
    displayName: string;
    email: string;
    location: string;
    totalJobsPosted: bigint;
    totalSpent: bigint;
    averageRating: bigint;
    totalRatings: bigint;
    isActive: boolean;
  };
}

export interface UserRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agentAddresses"
      | "agentCount"
      | "agents"
      | "getAgent"
      | "getAgentAtIndex"
      | "getAgentsByLocation"
      | "getAgentsByService"
      | "getAgentsPaginated"
      | "getAvailableAgents"
      | "getScout"
      | "incrementAgentEarnings"
      | "incrementScoutJobs"
      | "owner"
      | "pause"
      | "paused"
      | "registerAgent"
      | "registerScout"
      | "registeredAgents"
      | "registeredScouts"
      | "renounceOwnership"
      | "scoutAddresses"
      | "scoutCount"
      | "scouts"
      | "setAgentAvailability"
      | "transferOwnership"
      | "unpause"
      | "updateAgentLocation"
      | "updateAgentPrice"
      | "updateAgentRating"
      | "updateScoutRating"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentRegistered"
      | "AgentUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "ScoutRegistered"
      | "ScoutUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agentAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agentCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "agents", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentsByLocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentsByService",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentsPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAgents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScout",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementAgentEarnings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementScoutJobs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAgent",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerScout",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredAgents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredScouts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scoutAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scoutCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "scouts", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setAgentAvailability",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAgentLocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgentPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgentRating",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateScoutRating",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "agentAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agentCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "agents", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAgentAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentsByLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentsByService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementAgentEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementScoutJobs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerScout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredScouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scoutAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scoutCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scouts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAgentAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAgentLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgentRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateScoutRating",
    data: BytesLike
  ): Result;
}

export namespace AgentRegisteredEvent {
  export type InputTuple = [
    agent: AddressLike,
    name: string,
    serviceType: string
  ];
  export type OutputTuple = [agent: string, name: string, serviceType: string];
  export interface OutputObject {
    agent: string;
    name: string;
    serviceType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentUpdatedEvent {
  export type InputTuple = [agent: AddressLike];
  export type OutputTuple = [agent: string];
  export interface OutputObject {
    agent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoutRegisteredEvent {
  export type InputTuple = [scout: AddressLike, displayName: string];
  export type OutputTuple = [scout: string, displayName: string];
  export interface OutputObject {
    scout: string;
    displayName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoutUpdatedEvent {
  export type InputTuple = [scout: AddressLike];
  export type OutputTuple = [scout: string];
  export interface OutputObject {
    scout: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): UserRegistry;
  waitForDeployment(): Promise<this>;

  interface: UserRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agentAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  agentCount: TypedContractMethod<[], [bigint], "view">;

  agents: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        walletAddress: string;
        name: string;
        email: string;
        serviceType: string;
        priceInPAS: bigint;
        location: string;
        completedJobs: bigint;
        totalEarnings: bigint;
        averageRating: bigint;
        totalRatings: bigint;
        isAvailable: boolean;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getAgent: TypedContractMethod<
    [agentAddress: AddressLike],
    [UserRegistry.AgentStructOutput],
    "view"
  >;

  getAgentAtIndex: TypedContractMethod<
    [index: BigNumberish],
    [UserRegistry.AgentStructOutput],
    "view"
  >;

  getAgentsByLocation: TypedContractMethod<
    [location: string],
    [string[]],
    "view"
  >;

  getAgentsByService: TypedContractMethod<
    [serviceType: string],
    [string[]],
    "view"
  >;

  getAgentsPaginated: TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [[string[], bigint] & { addresses: string[]; totalCount: bigint }],
    "view"
  >;

  getAvailableAgents: TypedContractMethod<[], [string[]], "view">;

  getScout: TypedContractMethod<
    [scoutAddress: AddressLike],
    [UserRegistry.ScoutStructOutput],
    "view"
  >;

  incrementAgentEarnings: TypedContractMethod<
    [agent: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  incrementScoutJobs: TypedContractMethod<
    [scout: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerAgent: TypedContractMethod<
    [
      name: string,
      email: string,
      serviceType: string,
      priceInPAS: BigNumberish,
      location: string
    ],
    [void],
    "nonpayable"
  >;

  registerScout: TypedContractMethod<
    [displayName: string, email: string, location: string],
    [void],
    "nonpayable"
  >;

  registeredAgents: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  registeredScouts: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  scoutAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  scoutCount: TypedContractMethod<[], [bigint], "view">;

  scouts: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        walletAddress: string;
        displayName: string;
        email: string;
        location: string;
        totalJobsPosted: bigint;
        totalSpent: bigint;
        averageRating: bigint;
        totalRatings: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  setAgentAvailability: TypedContractMethod<
    [isAvailable: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAgentLocation: TypedContractMethod<
    [newLocation: string],
    [void],
    "nonpayable"
  >;

  updateAgentPrice: TypedContractMethod<
    [newPriceInPAS: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateAgentRating: TypedContractMethod<
    [agent: AddressLike, rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateScoutRating: TypedContractMethod<
    [scout: AddressLike, rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agentAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "agentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "agents"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        walletAddress: string;
        name: string;
        email: string;
        serviceType: string;
        priceInPAS: bigint;
        location: string;
        completedJobs: bigint;
        totalEarnings: bigint;
        averageRating: bigint;
        totalRatings: bigint;
        isAvailable: boolean;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgent"
  ): TypedContractMethod<
    [agentAddress: AddressLike],
    [UserRegistry.AgentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentAtIndex"
  ): TypedContractMethod<
    [index: BigNumberish],
    [UserRegistry.AgentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentsByLocation"
  ): TypedContractMethod<[location: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAgentsByService"
  ): TypedContractMethod<[serviceType: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAgentsPaginated"
  ): TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [[string[], bigint] & { addresses: string[]; totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvailableAgents"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getScout"
  ): TypedContractMethod<
    [scoutAddress: AddressLike],
    [UserRegistry.ScoutStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "incrementAgentEarnings"
  ): TypedContractMethod<
    [agent: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "incrementScoutJobs"
  ): TypedContractMethod<[scout: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAgent"
  ): TypedContractMethod<
    [
      name: string,
      email: string,
      serviceType: string,
      priceInPAS: BigNumberish,
      location: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerScout"
  ): TypedContractMethod<
    [displayName: string, email: string, location: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredAgents"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registeredScouts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scoutAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "scoutCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "scouts"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        walletAddress: string;
        displayName: string;
        email: string;
        location: string;
        totalJobsPosted: bigint;
        totalSpent: bigint;
        averageRating: bigint;
        totalRatings: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAgentAvailability"
  ): TypedContractMethod<[isAvailable: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAgentLocation"
  ): TypedContractMethod<[newLocation: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAgentPrice"
  ): TypedContractMethod<[newPriceInPAS: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAgentRating"
  ): TypedContractMethod<
    [agent: AddressLike, rating: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateScoutRating"
  ): TypedContractMethod<
    [scout: AddressLike, rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AgentRegistered"
  ): TypedContractEvent<
    AgentRegisteredEvent.InputTuple,
    AgentRegisteredEvent.OutputTuple,
    AgentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "AgentUpdated"
  ): TypedContractEvent<
    AgentUpdatedEvent.InputTuple,
    AgentUpdatedEvent.OutputTuple,
    AgentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ScoutRegistered"
  ): TypedContractEvent<
    ScoutRegisteredEvent.InputTuple,
    ScoutRegisteredEvent.OutputTuple,
    ScoutRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ScoutUpdated"
  ): TypedContractEvent<
    ScoutUpdatedEvent.InputTuple,
    ScoutUpdatedEvent.OutputTuple,
    ScoutUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AgentRegistered(address,string,string)": TypedContractEvent<
      AgentRegisteredEvent.InputTuple,
      AgentRegisteredEvent.OutputTuple,
      AgentRegisteredEvent.OutputObject
    >;
    AgentRegistered: TypedContractEvent<
      AgentRegisteredEvent.InputTuple,
      AgentRegisteredEvent.OutputTuple,
      AgentRegisteredEvent.OutputObject
    >;

    "AgentUpdated(address)": TypedContractEvent<
      AgentUpdatedEvent.InputTuple,
      AgentUpdatedEvent.OutputTuple,
      AgentUpdatedEvent.OutputObject
    >;
    AgentUpdated: TypedContractEvent<
      AgentUpdatedEvent.InputTuple,
      AgentUpdatedEvent.OutputTuple,
      AgentUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ScoutRegistered(address,string)": TypedContractEvent<
      ScoutRegisteredEvent.InputTuple,
      ScoutRegisteredEvent.OutputTuple,
      ScoutRegisteredEvent.OutputObject
    >;
    ScoutRegistered: TypedContractEvent<
      ScoutRegisteredEvent.InputTuple,
      ScoutRegisteredEvent.OutputTuple,
      ScoutRegisteredEvent.OutputObject
    >;

    "ScoutUpdated(address)": TypedContractEvent<
      ScoutUpdatedEvent.InputTuple,
      ScoutUpdatedEvent.OutputTuple,
      ScoutUpdatedEvent.OutputObject
    >;
    ScoutUpdated: TypedContractEvent<
      ScoutUpdatedEvent.InputTuple,
      ScoutUpdatedEvent.OutputTuple,
      ScoutUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
