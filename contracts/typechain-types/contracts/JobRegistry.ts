/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface JobRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAgent"
      | "agentJobCount"
      | "agentJobs"
      | "applyForJob"
      | "approveJobCompletion"
      | "cancelJobRequest"
      | "disputeJob"
      | "getAgentJobsPaginated"
      | "getJobApplicationsPaginated"
      | "getJobBasicInfo"
      | "getJobBasicInfoPart1"
      | "getJobBasicInfoPart2"
      | "getJobBasicInfoPart3"
      | "getJobProofUrls"
      | "getScoutJobsPaginated"
      | "hasApplied"
      | "jobApplicationCount"
      | "jobApplications"
      | "jobs"
      | "nextJobId"
      | "owner"
      | "pause"
      | "paused"
      | "postJobRequest"
      | "renounceOwnership"
      | "scoutJobCount"
      | "scoutJobs"
      | "setUserRegistry"
      | "startJob"
      | "submitJobCompletion"
      | "transferOwnership"
      | "unpause"
      | "updateJobProgress"
      | "userRegistry"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "JobApplicationSubmitted"
      | "JobAssigned"
      | "JobCancelled"
      | "JobCompleted"
      | "JobDisputed"
      | "JobPosted"
      | "JobProgressUpdated"
      | "JobStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptAgent",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "agentJobCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "agentJobs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyForJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveJobCompletion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelJobRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeJob",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentJobsPaginated",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobApplicationsPaginated",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobBasicInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobBasicInfoPart1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobBasicInfoPart2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobBasicInfoPart3",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobProofUrls",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScoutJobsPaginated",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasApplied",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jobApplicationCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jobApplications",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "nextJobId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postJobRequest",
    values: [string, string, string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scoutJobCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scoutJobs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitJobCompletion",
    values: [BigNumberish, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateJobProgress",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentJobCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agentJobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyForJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveJobCompletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelJobRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputeJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAgentJobsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobApplicationsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobBasicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobBasicInfoPart1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobBasicInfoPart2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobBasicInfoPart3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobProofUrls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScoutJobsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasApplied", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jobApplicationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobApplications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextJobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postJobRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scoutJobCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scoutJobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitJobCompletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateJobProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRegistry",
    data: BytesLike
  ): Result;
}

export namespace JobApplicationSubmittedEvent {
  export type InputTuple = [jobId: BigNumberish, agent: AddressLike];
  export type OutputTuple = [jobId: bigint, agent: string];
  export interface OutputObject {
    jobId: bigint;
    agent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobAssignedEvent {
  export type InputTuple = [jobId: BigNumberish, agent: AddressLike];
  export type OutputTuple = [jobId: bigint, agent: string];
  export interface OutputObject {
    jobId: bigint;
    agent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCancelledEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCompletedEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobDisputedEvent {
  export type InputTuple = [jobId: BigNumberish, reason: string];
  export type OutputTuple = [jobId: bigint, reason: string];
  export interface OutputObject {
    jobId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobPostedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    scout: AddressLike,
    budget: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, scout: string, budget: bigint];
  export interface OutputObject {
    jobId: bigint;
    scout: string;
    budget: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobProgressUpdatedEvent {
  export type InputTuple = [jobId: BigNumberish, progress: BigNumberish];
  export type OutputTuple = [jobId: bigint, progress: bigint];
  export interface OutputObject {
    jobId: bigint;
    progress: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobStartedEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JobRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): JobRegistry;
  waitForDeployment(): Promise<this>;

  interface: JobRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAgent: TypedContractMethod<
    [jobId: BigNumberish, agent: AddressLike],
    [void],
    "nonpayable"
  >;

  agentJobCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  agentJobs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  applyForJob: TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  approveJobCompletion: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelJobRequest: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  disputeJob: TypedContractMethod<
    [jobId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  getAgentJobsPaginated: TypedContractMethod<
    [agent: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { jobIds: bigint[]; totalCount: bigint }],
    "view"
  >;

  getJobApplicationsPaginated: TypedContractMethod<
    [jobId: BigNumberish, startIndex: BigNumberish, count: BigNumberish],
    [[string[], bigint] & { applications: string[]; totalCount: bigint }],
    "view"
  >;

  getJobBasicInfo: TypedContractMethod<
    [jobId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        _jobId: bigint;
        _scout: string;
        _assignedAgent: string;
        _title: string;
        _description: string;
        _location: string;
        _budget: bigint;
        _escrowAmount: bigint;
        _status: bigint;
        _progress: bigint;
        _createdAt: bigint;
        _deadline: bigint;
        _isCompleted: boolean;
        _isPaid: boolean;
      }
    ],
    "view"
  >;

  getJobBasicInfoPart1: TypedContractMethod<
    [jobId: BigNumberish],
    [
      [bigint, string, string, string, string] & {
        _jobId: bigint;
        _scout: string;
        _assignedAgent: string;
        _title: string;
        _description: string;
      }
    ],
    "view"
  >;

  getJobBasicInfoPart2: TypedContractMethod<
    [jobId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        _location: string;
        _budget: bigint;
        _escrowAmount: bigint;
        _status: bigint;
        _progress: bigint;
      }
    ],
    "view"
  >;

  getJobBasicInfoPart3: TypedContractMethod<
    [jobId: BigNumberish],
    [
      [bigint, bigint, boolean, boolean] & {
        _createdAt: bigint;
        _deadline: bigint;
        _isCompleted: boolean;
        _isPaid: boolean;
      }
    ],
    "view"
  >;

  getJobProofUrls: TypedContractMethod<
    [jobId: BigNumberish],
    [string[]],
    "view"
  >;

  getScoutJobsPaginated: TypedContractMethod<
    [scout: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { jobIds: bigint[]; totalCount: bigint }],
    "view"
  >;

  hasApplied: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  jobApplicationCount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  jobApplications: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        jobId: bigint;
        scout: string;
        assignedAgent: string;
        title: string;
        description: string;
        location: string;
        budget: bigint;
        escrowAmount: bigint;
        status: bigint;
        progress: bigint;
        createdAt: bigint;
        deadline: bigint;
        isCompleted: boolean;
        isPaid: boolean;
      }
    ],
    "view"
  >;

  nextJobId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  postJobRequest: TypedContractMethod<
    [
      title: string,
      description: string,
      location: string,
      budget: BigNumberish,
      preferredAgent: AddressLike
    ],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  scoutJobCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  scoutJobs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  setUserRegistry: TypedContractMethod<
    [_userRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  startJob: TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  submitJobCompletion: TypedContractMethod<
    [jobId: BigNumberish, deliverables: string, proofUrls: string[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateJobProgress: TypedContractMethod<
    [
      jobId: BigNumberish,
      progressPercentage: BigNumberish,
      updateMessage: string
    ],
    [void],
    "nonpayable"
  >;

  userRegistry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAgent"
  ): TypedContractMethod<
    [jobId: BigNumberish, agent: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agentJobCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "agentJobs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "applyForJob"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveJobCompletion"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelJobRequest"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disputeJob"
  ): TypedContractMethod<
    [jobId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAgentJobsPaginated"
  ): TypedContractMethod<
    [agent: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { jobIds: bigint[]; totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobApplicationsPaginated"
  ): TypedContractMethod<
    [jobId: BigNumberish, startIndex: BigNumberish, count: BigNumberish],
    [[string[], bigint] & { applications: string[]; totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobBasicInfo"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        _jobId: bigint;
        _scout: string;
        _assignedAgent: string;
        _title: string;
        _description: string;
        _location: string;
        _budget: bigint;
        _escrowAmount: bigint;
        _status: bigint;
        _progress: bigint;
        _createdAt: bigint;
        _deadline: bigint;
        _isCompleted: boolean;
        _isPaid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobBasicInfoPart1"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [
      [bigint, string, string, string, string] & {
        _jobId: bigint;
        _scout: string;
        _assignedAgent: string;
        _title: string;
        _description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobBasicInfoPart2"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        _location: string;
        _budget: bigint;
        _escrowAmount: bigint;
        _status: bigint;
        _progress: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobBasicInfoPart3"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [
      [bigint, bigint, boolean, boolean] & {
        _createdAt: bigint;
        _deadline: bigint;
        _isCompleted: boolean;
        _isPaid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobProofUrls"
  ): TypedContractMethod<[jobId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getScoutJobsPaginated"
  ): TypedContractMethod<
    [scout: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { jobIds: bigint[]; totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasApplied"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobApplicationCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobApplications"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        jobId: bigint;
        scout: string;
        assignedAgent: string;
        title: string;
        description: string;
        location: string;
        budget: bigint;
        escrowAmount: bigint;
        status: bigint;
        progress: bigint;
        createdAt: bigint;
        deadline: bigint;
        isCompleted: boolean;
        isPaid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextJobId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "postJobRequest"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      location: string,
      budget: BigNumberish,
      preferredAgent: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scoutJobCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "scoutJobs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setUserRegistry"
  ): TypedContractMethod<[_userRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startJob"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitJobCompletion"
  ): TypedContractMethod<
    [jobId: BigNumberish, deliverables: string, proofUrls: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateJobProgress"
  ): TypedContractMethod<
    [
      jobId: BigNumberish,
      progressPercentage: BigNumberish,
      updateMessage: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRegistry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "JobApplicationSubmitted"
  ): TypedContractEvent<
    JobApplicationSubmittedEvent.InputTuple,
    JobApplicationSubmittedEvent.OutputTuple,
    JobApplicationSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "JobAssigned"
  ): TypedContractEvent<
    JobAssignedEvent.InputTuple,
    JobAssignedEvent.OutputTuple,
    JobAssignedEvent.OutputObject
  >;
  getEvent(
    key: "JobCancelled"
  ): TypedContractEvent<
    JobCancelledEvent.InputTuple,
    JobCancelledEvent.OutputTuple,
    JobCancelledEvent.OutputObject
  >;
  getEvent(
    key: "JobCompleted"
  ): TypedContractEvent<
    JobCompletedEvent.InputTuple,
    JobCompletedEvent.OutputTuple,
    JobCompletedEvent.OutputObject
  >;
  getEvent(
    key: "JobDisputed"
  ): TypedContractEvent<
    JobDisputedEvent.InputTuple,
    JobDisputedEvent.OutputTuple,
    JobDisputedEvent.OutputObject
  >;
  getEvent(
    key: "JobPosted"
  ): TypedContractEvent<
    JobPostedEvent.InputTuple,
    JobPostedEvent.OutputTuple,
    JobPostedEvent.OutputObject
  >;
  getEvent(
    key: "JobProgressUpdated"
  ): TypedContractEvent<
    JobProgressUpdatedEvent.InputTuple,
    JobProgressUpdatedEvent.OutputTuple,
    JobProgressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "JobStarted"
  ): TypedContractEvent<
    JobStartedEvent.InputTuple,
    JobStartedEvent.OutputTuple,
    JobStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "JobApplicationSubmitted(uint256,address)": TypedContractEvent<
      JobApplicationSubmittedEvent.InputTuple,
      JobApplicationSubmittedEvent.OutputTuple,
      JobApplicationSubmittedEvent.OutputObject
    >;
    JobApplicationSubmitted: TypedContractEvent<
      JobApplicationSubmittedEvent.InputTuple,
      JobApplicationSubmittedEvent.OutputTuple,
      JobApplicationSubmittedEvent.OutputObject
    >;

    "JobAssigned(uint256,address)": TypedContractEvent<
      JobAssignedEvent.InputTuple,
      JobAssignedEvent.OutputTuple,
      JobAssignedEvent.OutputObject
    >;
    JobAssigned: TypedContractEvent<
      JobAssignedEvent.InputTuple,
      JobAssignedEvent.OutputTuple,
      JobAssignedEvent.OutputObject
    >;

    "JobCancelled(uint256)": TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;
    JobCancelled: TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;

    "JobCompleted(uint256)": TypedContractEvent<
      JobCompletedEvent.InputTuple,
      JobCompletedEvent.OutputTuple,
      JobCompletedEvent.OutputObject
    >;
    JobCompleted: TypedContractEvent<
      JobCompletedEvent.InputTuple,
      JobCompletedEvent.OutputTuple,
      JobCompletedEvent.OutputObject
    >;

    "JobDisputed(uint256,string)": TypedContractEvent<
      JobDisputedEvent.InputTuple,
      JobDisputedEvent.OutputTuple,
      JobDisputedEvent.OutputObject
    >;
    JobDisputed: TypedContractEvent<
      JobDisputedEvent.InputTuple,
      JobDisputedEvent.OutputTuple,
      JobDisputedEvent.OutputObject
    >;

    "JobPosted(uint256,address,uint256)": TypedContractEvent<
      JobPostedEvent.InputTuple,
      JobPostedEvent.OutputTuple,
      JobPostedEvent.OutputObject
    >;
    JobPosted: TypedContractEvent<
      JobPostedEvent.InputTuple,
      JobPostedEvent.OutputTuple,
      JobPostedEvent.OutputObject
    >;

    "JobProgressUpdated(uint256,uint8)": TypedContractEvent<
      JobProgressUpdatedEvent.InputTuple,
      JobProgressUpdatedEvent.OutputTuple,
      JobProgressUpdatedEvent.OutputObject
    >;
    JobProgressUpdated: TypedContractEvent<
      JobProgressUpdatedEvent.InputTuple,
      JobProgressUpdatedEvent.OutputTuple,
      JobProgressUpdatedEvent.OutputObject
    >;

    "JobStarted(uint256)": TypedContractEvent<
      JobStartedEvent.InputTuple,
      JobStartedEvent.OutputTuple,
      JobStartedEvent.OutputObject
    >;
    JobStarted: TypedContractEvent<
      JobStartedEvent.InputTuple,
      JobStartedEvent.OutputTuple,
      JobStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
