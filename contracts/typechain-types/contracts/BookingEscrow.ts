/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BookingEscrow {
  export type BookingStruct = {
    id: BigNumberish;
    consumer: AddressLike;
    agent: AddressLike;
    amount: BigNumberish;
    completed: boolean;
    timestamp: BigNumberish;
    message: string;
  };

  export type BookingStructOutput = [
    id: bigint,
    consumer: string,
    agent: string,
    amount: bigint,
    completed: boolean,
    timestamp: bigint,
    message: string
  ] & {
    id: bigint;
    consumer: string;
    agent: string;
    amount: bigint;
    completed: boolean;
    timestamp: bigint;
    message: string;
  };
}

export interface BookingEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bookAgent"
      | "bookings"
      | "bookingsByAgent"
      | "bookingsByConsumer"
      | "completeService"
      | "getAllBookings"
      | "getBookingsByAgent"
      | "getBookingsByConsumer"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Booked" | "Completed"): EventFragment;

  encodeFunctionData(
    functionFragment: "bookAgent",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bookings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bookingsByAgent",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bookingsByConsumer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBookings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBookingsByAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBookingsByConsumer",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "bookAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bookingsByAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bookingsByConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBookingsByAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBookingsByConsumer",
    data: BytesLike
  ): Result;
}

export namespace BookedEvent {
  export type InputTuple = [
    bookingId: BigNumberish,
    consumer: AddressLike,
    agent: AddressLike,
    amount: BigNumberish,
    message: string
  ];
  export type OutputTuple = [
    bookingId: bigint,
    consumer: string,
    agent: string,
    amount: bigint,
    message: string
  ];
  export interface OutputObject {
    bookingId: bigint;
    consumer: string;
    agent: string;
    amount: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompletedEvent {
  export type InputTuple = [bookingId: BigNumberish];
  export type OutputTuple = [bookingId: bigint];
  export interface OutputObject {
    bookingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BookingEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): BookingEscrow;
  waitForDeployment(): Promise<this>;

  interface: BookingEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bookAgent: TypedContractMethod<
    [agent: AddressLike, message: string],
    [void],
    "payable"
  >;

  bookings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint, string] & {
        id: bigint;
        consumer: string;
        agent: string;
        amount: bigint;
        completed: boolean;
        timestamp: bigint;
        message: string;
      }
    ],
    "view"
  >;

  bookingsByAgent: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  bookingsByConsumer: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  completeService: TypedContractMethod<
    [bookingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllBookings: TypedContractMethod<
    [],
    [BookingEscrow.BookingStructOutput[]],
    "view"
  >;

  getBookingsByAgent: TypedContractMethod<
    [agent: AddressLike],
    [BookingEscrow.BookingStructOutput[]],
    "view"
  >;

  getBookingsByConsumer: TypedContractMethod<
    [consumer: AddressLike],
    [BookingEscrow.BookingStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bookAgent"
  ): TypedContractMethod<
    [agent: AddressLike, message: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bookings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint, string] & {
        id: bigint;
        consumer: string;
        agent: string;
        amount: bigint;
        completed: boolean;
        timestamp: bigint;
        message: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bookingsByAgent"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "bookingsByConsumer"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "completeService"
  ): TypedContractMethod<[bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllBookings"
  ): TypedContractMethod<[], [BookingEscrow.BookingStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getBookingsByAgent"
  ): TypedContractMethod<
    [agent: AddressLike],
    [BookingEscrow.BookingStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBookingsByConsumer"
  ): TypedContractMethod<
    [consumer: AddressLike],
    [BookingEscrow.BookingStructOutput[]],
    "view"
  >;

  getEvent(
    key: "Booked"
  ): TypedContractEvent<
    BookedEvent.InputTuple,
    BookedEvent.OutputTuple,
    BookedEvent.OutputObject
  >;
  getEvent(
    key: "Completed"
  ): TypedContractEvent<
    CompletedEvent.InputTuple,
    CompletedEvent.OutputTuple,
    CompletedEvent.OutputObject
  >;

  filters: {
    "Booked(uint256,address,address,uint256,string)": TypedContractEvent<
      BookedEvent.InputTuple,
      BookedEvent.OutputTuple,
      BookedEvent.OutputObject
    >;
    Booked: TypedContractEvent<
      BookedEvent.InputTuple,
      BookedEvent.OutputTuple,
      BookedEvent.OutputObject
    >;

    "Completed(uint256)": TypedContractEvent<
      CompletedEvent.InputTuple,
      CompletedEvent.OutputTuple,
      CompletedEvent.OutputObject
    >;
    Completed: TypedContractEvent<
      CompletedEvent.InputTuple,
      CompletedEvent.OutputTuple,
      CompletedEvent.OutputObject
    >;
  };
}
