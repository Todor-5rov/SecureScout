/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace UserRegistry {
  export type AgentStruct = {
    walletAddress: AddressLike;
    name: string;
    email: string;
    serviceType: string;
    priceInPAS: BigNumberish;
    location: string;
    completedJobs: BigNumberish;
    totalEarnings: BigNumberish;
    averageRating: BigNumberish;
    totalRatings: BigNumberish;
    isAvailable: boolean;
    isActive: boolean;
  };

  export type AgentStructOutput = [
    walletAddress: string,
    name: string,
    email: string,
    serviceType: string,
    priceInPAS: bigint,
    location: string,
    completedJobs: bigint,
    totalEarnings: bigint,
    averageRating: bigint,
    totalRatings: bigint,
    isAvailable: boolean,
    isActive: boolean
  ] & {
    walletAddress: string;
    name: string;
    email: string;
    serviceType: string;
    priceInPAS: bigint;
    location: string;
    completedJobs: bigint;
    totalEarnings: bigint;
    averageRating: bigint;
    totalRatings: bigint;
    isAvailable: boolean;
    isActive: boolean;
  };

  export type ScoutStruct = {
    walletAddress: AddressLike;
    displayName: string;
    email: string;
    location: string;
    totalJobsPosted: BigNumberish;
    totalSpent: BigNumberish;
    averageRating: BigNumberish;
    totalRatings: BigNumberish;
    isActive: boolean;
  };

  export type ScoutStructOutput = [
    walletAddress: string,
    displayName: string,
    email: string,
    location: string,
    totalJobsPosted: bigint,
    totalSpent: bigint,
    averageRating: bigint,
    totalRatings: bigint,
    isActive: boolean
  ] & {
    walletAddress: string;
    displayName: string;
    email: string;
    location: string;
    totalJobsPosted: bigint;
    totalSpent: bigint;
    averageRating: bigint;
    totalRatings: bigint;
    isActive: boolean;
  };
}

export declare namespace RatingRegistry {
  export type ReviewStruct = {
    reviewer: AddressLike;
    reviewee: AddressLike;
    jobId: BigNumberish;
    rating: BigNumberish;
    comment: string;
    timestamp: BigNumberish;
  };

  export type ReviewStructOutput = [
    reviewer: string,
    reviewee: string,
    jobId: bigint,
    rating: bigint,
    comment: string,
    timestamp: bigint
  ] & {
    reviewer: string;
    reviewee: string;
    jobId: bigint;
    rating: bigint;
    comment: string;
    timestamp: bigint;
  };
}

export interface SecureScoutHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAgent"
      | "applyForJob"
      | "approveJobCompletion"
      | "cancelJobRequest"
      | "disputeJob"
      | "emergencyPause"
      | "emergencyUnpause"
      | "getAgent"
      | "getAgentAtIndex"
      | "getAgentEarnings"
      | "getAgentJobsPaginated"
      | "getAgentRating"
      | "getAgentsByLocation"
      | "getAgentsByService"
      | "getAgentsPaginated"
      | "getAvailableAgents"
      | "getContractAddresses"
      | "getEscrowBalance"
      | "getJobApplicationsPaginated"
      | "getJobBasicInfo"
      | "getJobProofUrls"
      | "getJobReviews"
      | "getPendingPayments"
      | "getScout"
      | "getScoutJobsPaginated"
      | "getScoutRating"
      | "getUserReviewsPaginated"
      | "jobRegistry"
      | "owner"
      | "pause"
      | "paused"
      | "paymentRegistry"
      | "postJobRequest"
      | "rateAgent"
      | "rateScout"
      | "ratingRegistry"
      | "registerAgent"
      | "registerScout"
      | "renounceOwnership"
      | "setAgentAvailability"
      | "setJobRegistry"
      | "setPaymentRegistry"
      | "setRatingRegistry"
      | "setUserRegistry"
      | "startJob"
      | "submitJobCompletion"
      | "transferOwnership"
      | "unpause"
      | "updateAgentLocation"
      | "updateAgentPrice"
      | "updateJobProgress"
      | "userRegistry"
      | "withdrawEarnings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "SystemPaused"
      | "SystemUnpaused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptAgent",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "applyForJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveJobCompletion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelJobRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeJob",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentJobsPaginated",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentRating",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentsByLocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentsByService",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentsPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAgents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobApplicationsPaginated",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobBasicInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobProofUrls",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobReviews",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingPayments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getScout",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getScoutJobsPaginated",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScoutRating",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReviewsPaginated",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jobRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postJobRequest",
    values: [string, string, string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateAgent",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rateScout",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ratingRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAgent",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerScout",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAgentAvailability",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setJobRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRatingRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitJobCompletion",
    values: [BigNumberish, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAgentLocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgentPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateJobProgress",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEarnings",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyForJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveJobCompletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelJobRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputeJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAgentAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentJobsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentsByLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentsByService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobApplicationsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobBasicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobProofUrls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getScoutJobsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScoutRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReviewsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postJobRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rateAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateScout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ratingRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerScout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAgentAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJobRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRatingRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitJobCompletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAgentLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJobProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEarnings",
    data: BytesLike
  ): Result;
}

export namespace ContractUpdatedEvent {
  export type InputTuple = [contractName: string, newAddress: AddressLike];
  export type OutputTuple = [contractName: string, newAddress: string];
  export interface OutputObject {
    contractName: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SystemPausedEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SystemUnpausedEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecureScoutHub extends BaseContract {
  connect(runner?: ContractRunner | null): SecureScoutHub;
  waitForDeployment(): Promise<this>;

  interface: SecureScoutHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAgent: TypedContractMethod<
    [jobId: BigNumberish, agent: AddressLike],
    [void],
    "nonpayable"
  >;

  applyForJob: TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  approveJobCompletion: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelJobRequest: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  disputeJob: TypedContractMethod<
    [jobId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  getAgent: TypedContractMethod<
    [agentAddress: AddressLike],
    [UserRegistry.AgentStructOutput],
    "view"
  >;

  getAgentAtIndex: TypedContractMethod<
    [index: BigNumberish],
    [UserRegistry.AgentStructOutput],
    "view"
  >;

  getAgentEarnings: TypedContractMethod<[agent: AddressLike], [bigint], "view">;

  getAgentJobsPaginated: TypedContractMethod<
    [agent: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { jobIds: bigint[]; totalCount: bigint }],
    "view"
  >;

  getAgentRating: TypedContractMethod<
    [agent: AddressLike],
    [[bigint, bigint] & { averageRating: bigint; totalRatings: bigint }],
    "view"
  >;

  getAgentsByLocation: TypedContractMethod<
    [location: string],
    [string[]],
    "view"
  >;

  getAgentsByService: TypedContractMethod<
    [serviceType: string],
    [string[]],
    "view"
  >;

  getAgentsPaginated: TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [[string[], bigint] & { agentAddresses: string[]; totalCount: bigint }],
    "view"
  >;

  getAvailableAgents: TypedContractMethod<[], [string[]], "view">;

  getContractAddresses: TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        _userRegistry: string;
        _jobRegistry: string;
        _paymentRegistry: string;
        _ratingRegistry: string;
      }
    ],
    "view"
  >;

  getEscrowBalance: TypedContractMethod<
    [jobId: BigNumberish],
    [bigint],
    "view"
  >;

  getJobApplicationsPaginated: TypedContractMethod<
    [jobId: BigNumberish, startIndex: BigNumberish, count: BigNumberish],
    [[string[], bigint] & { applications: string[]; totalCount: bigint }],
    "view"
  >;

  getJobBasicInfo: TypedContractMethod<
    [jobId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        _jobId: bigint;
        _scout: string;
        _assignedAgent: string;
        _title: string;
        _description: string;
        _location: string;
        _budget: bigint;
        _escrowAmount: bigint;
        _status: bigint;
        _progress: bigint;
        _createdAt: bigint;
        _deadline: bigint;
        _isCompleted: boolean;
        _isPaid: boolean;
      }
    ],
    "view"
  >;

  getJobProofUrls: TypedContractMethod<
    [jobId: BigNumberish],
    [string[]],
    "view"
  >;

  getJobReviews: TypedContractMethod<
    [jobId: BigNumberish],
    [RatingRegistry.ReviewStructOutput],
    "view"
  >;

  getPendingPayments: TypedContractMethod<
    [agent: AddressLike],
    [bigint],
    "view"
  >;

  getScout: TypedContractMethod<
    [scoutAddress: AddressLike],
    [UserRegistry.ScoutStructOutput],
    "view"
  >;

  getScoutJobsPaginated: TypedContractMethod<
    [scout: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { jobIds: bigint[]; totalCount: bigint }],
    "view"
  >;

  getScoutRating: TypedContractMethod<
    [scout: AddressLike],
    [[bigint, bigint] & { averageRating: bigint; totalRatings: bigint }],
    "view"
  >;

  getUserReviewsPaginated: TypedContractMethod<
    [user: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { reviewJobIds: bigint[]; totalCount: bigint }],
    "view"
  >;

  jobRegistry: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  paymentRegistry: TypedContractMethod<[], [string], "view">;

  postJobRequest: TypedContractMethod<
    [
      title: string,
      description: string,
      location: string,
      budget: BigNumberish,
      preferredAgent: AddressLike
    ],
    [void],
    "payable"
  >;

  rateAgent: TypedContractMethod<
    [jobId: BigNumberish, rating: BigNumberish, review: string],
    [void],
    "nonpayable"
  >;

  rateScout: TypedContractMethod<
    [jobId: BigNumberish, rating: BigNumberish, review: string],
    [void],
    "nonpayable"
  >;

  ratingRegistry: TypedContractMethod<[], [string], "view">;

  registerAgent: TypedContractMethod<
    [
      name: string,
      email: string,
      serviceType: string,
      priceInPAS: BigNumberish,
      location: string
    ],
    [void],
    "nonpayable"
  >;

  registerScout: TypedContractMethod<
    [displayName: string, email: string, location: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAgentAvailability: TypedContractMethod<
    [isAvailable: boolean],
    [void],
    "nonpayable"
  >;

  setJobRegistry: TypedContractMethod<
    [_jobRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  setPaymentRegistry: TypedContractMethod<
    [_paymentRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  setRatingRegistry: TypedContractMethod<
    [_ratingRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  setUserRegistry: TypedContractMethod<
    [_userRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  startJob: TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  submitJobCompletion: TypedContractMethod<
    [jobId: BigNumberish, deliverables: string, proofUrls: string[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAgentLocation: TypedContractMethod<
    [newLocation: string],
    [void],
    "nonpayable"
  >;

  updateAgentPrice: TypedContractMethod<
    [newPriceInPAS: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateJobProgress: TypedContractMethod<
    [
      jobId: BigNumberish,
      progressPercentage: BigNumberish,
      updateMessage: string
    ],
    [void],
    "nonpayable"
  >;

  userRegistry: TypedContractMethod<[], [string], "view">;

  withdrawEarnings: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAgent"
  ): TypedContractMethod<
    [jobId: BigNumberish, agent: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applyForJob"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveJobCompletion"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelJobRequest"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disputeJob"
  ): TypedContractMethod<
    [jobId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAgent"
  ): TypedContractMethod<
    [agentAddress: AddressLike],
    [UserRegistry.AgentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentAtIndex"
  ): TypedContractMethod<
    [index: BigNumberish],
    [UserRegistry.AgentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentEarnings"
  ): TypedContractMethod<[agent: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAgentJobsPaginated"
  ): TypedContractMethod<
    [agent: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { jobIds: bigint[]; totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentRating"
  ): TypedContractMethod<
    [agent: AddressLike],
    [[bigint, bigint] & { averageRating: bigint; totalRatings: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentsByLocation"
  ): TypedContractMethod<[location: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAgentsByService"
  ): TypedContractMethod<[serviceType: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAgentsPaginated"
  ): TypedContractMethod<
    [startIndex: BigNumberish, count: BigNumberish],
    [[string[], bigint] & { agentAddresses: string[]; totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvailableAgents"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractAddresses"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        _userRegistry: string;
        _jobRegistry: string;
        _paymentRegistry: string;
        _ratingRegistry: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEscrowBalance"
  ): TypedContractMethod<[jobId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getJobApplicationsPaginated"
  ): TypedContractMethod<
    [jobId: BigNumberish, startIndex: BigNumberish, count: BigNumberish],
    [[string[], bigint] & { applications: string[]; totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobBasicInfo"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        _jobId: bigint;
        _scout: string;
        _assignedAgent: string;
        _title: string;
        _description: string;
        _location: string;
        _budget: bigint;
        _escrowAmount: bigint;
        _status: bigint;
        _progress: bigint;
        _createdAt: bigint;
        _deadline: bigint;
        _isCompleted: boolean;
        _isPaid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobProofUrls"
  ): TypedContractMethod<[jobId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getJobReviews"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [RatingRegistry.ReviewStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingPayments"
  ): TypedContractMethod<[agent: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getScout"
  ): TypedContractMethod<
    [scoutAddress: AddressLike],
    [UserRegistry.ScoutStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getScoutJobsPaginated"
  ): TypedContractMethod<
    [scout: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { jobIds: bigint[]; totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getScoutRating"
  ): TypedContractMethod<
    [scout: AddressLike],
    [[bigint, bigint] & { averageRating: bigint; totalRatings: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserReviewsPaginated"
  ): TypedContractMethod<
    [user: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { reviewJobIds: bigint[]; totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "paymentRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postJobRequest"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      location: string,
      budget: BigNumberish,
      preferredAgent: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rateAgent"
  ): TypedContractMethod<
    [jobId: BigNumberish, rating: BigNumberish, review: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rateScout"
  ): TypedContractMethod<
    [jobId: BigNumberish, rating: BigNumberish, review: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ratingRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerAgent"
  ): TypedContractMethod<
    [
      name: string,
      email: string,
      serviceType: string,
      priceInPAS: BigNumberish,
      location: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerScout"
  ): TypedContractMethod<
    [displayName: string, email: string, location: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAgentAvailability"
  ): TypedContractMethod<[isAvailable: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setJobRegistry"
  ): TypedContractMethod<[_jobRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaymentRegistry"
  ): TypedContractMethod<[_paymentRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRatingRegistry"
  ): TypedContractMethod<[_ratingRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserRegistry"
  ): TypedContractMethod<[_userRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startJob"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitJobCompletion"
  ): TypedContractMethod<
    [jobId: BigNumberish, deliverables: string, proofUrls: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAgentLocation"
  ): TypedContractMethod<[newLocation: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAgentPrice"
  ): TypedContractMethod<[newPriceInPAS: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateJobProgress"
  ): TypedContractMethod<
    [
      jobId: BigNumberish,
      progressPercentage: BigNumberish,
      updateMessage: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawEarnings"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ContractUpdated"
  ): TypedContractEvent<
    ContractUpdatedEvent.InputTuple,
    ContractUpdatedEvent.OutputTuple,
    ContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SystemPaused"
  ): TypedContractEvent<
    SystemPausedEvent.InputTuple,
    SystemPausedEvent.OutputTuple,
    SystemPausedEvent.OutputObject
  >;
  getEvent(
    key: "SystemUnpaused"
  ): TypedContractEvent<
    SystemUnpausedEvent.InputTuple,
    SystemUnpausedEvent.OutputTuple,
    SystemUnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ContractUpdated(string,address)": TypedContractEvent<
      ContractUpdatedEvent.InputTuple,
      ContractUpdatedEvent.OutputTuple,
      ContractUpdatedEvent.OutputObject
    >;
    ContractUpdated: TypedContractEvent<
      ContractUpdatedEvent.InputTuple,
      ContractUpdatedEvent.OutputTuple,
      ContractUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SystemPaused(address)": TypedContractEvent<
      SystemPausedEvent.InputTuple,
      SystemPausedEvent.OutputTuple,
      SystemPausedEvent.OutputObject
    >;
    SystemPaused: TypedContractEvent<
      SystemPausedEvent.InputTuple,
      SystemPausedEvent.OutputTuple,
      SystemPausedEvent.OutputObject
    >;

    "SystemUnpaused(address)": TypedContractEvent<
      SystemUnpausedEvent.InputTuple,
      SystemUnpausedEvent.OutputTuple,
      SystemUnpausedEvent.OutputObject
    >;
    SystemUnpaused: TypedContractEvent<
      SystemUnpausedEvent.InputTuple,
      SystemUnpausedEvent.OutputTuple,
      SystemUnpausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
