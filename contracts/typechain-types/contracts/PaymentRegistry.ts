/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PaymentRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agentEarnings"
      | "depositFunds"
      | "emergencyWithdraw"
      | "escrowBalances"
      | "getAgentEarnings"
      | "getEscrowBalance"
      | "getPendingPayments"
      | "getPlatformFees"
      | "jobRegistry"
      | "owner"
      | "pause"
      | "paused"
      | "paymentsReleased"
      | "pendingPayments"
      | "platformFeeBps"
      | "platformFees"
      | "refundPayment"
      | "releasePayment"
      | "renounceOwnership"
      | "setJobRegistry"
      | "setPlatformFee"
      | "setUserRegistry"
      | "transferOwnership"
      | "unpause"
      | "userRegistry"
      | "withdrawEarnings"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EarningsWithdrawn"
      | "FundsDeposited"
      | "OwnershipTransferred"
      | "Paused"
      | "PaymentRefunded"
      | "PaymentReleased"
      | "PlatformFeeCollected"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agentEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingPayments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jobRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentsReleased",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPayments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releasePayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setJobRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "agentEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentsReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJobRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace EarningsWithdrawnEvent {
  export type InputTuple = [agent: AddressLike, amount: BigNumberish];
  export type OutputTuple = [agent: string, amount: bigint];
  export interface OutputObject {
    agent: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [jobId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [jobId: bigint, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentRefundedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    scout: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, scout: string, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    scout: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReleasedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    agent: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, agent: string, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    agent: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeCollectedEvent {
  export type InputTuple = [jobId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [jobId: bigint, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentRegistry;
  waitForDeployment(): Promise<this>;

  interface: PaymentRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agentEarnings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  depositFunds: TypedContractMethod<[jobId: BigNumberish], [void], "payable">;

  emergencyWithdraw: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  escrowBalances: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getAgentEarnings: TypedContractMethod<[agent: AddressLike], [bigint], "view">;

  getEscrowBalance: TypedContractMethod<
    [jobId: BigNumberish],
    [bigint],
    "view"
  >;

  getPendingPayments: TypedContractMethod<
    [agent: AddressLike],
    [bigint],
    "view"
  >;

  getPlatformFees: TypedContractMethod<[], [bigint], "view">;

  jobRegistry: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  paymentsReleased: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  pendingPayments: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  platformFeeBps: TypedContractMethod<[], [bigint], "view">;

  platformFees: TypedContractMethod<[], [bigint], "view">;

  refundPayment: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  releasePayment: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setJobRegistry: TypedContractMethod<
    [_jobRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  setPlatformFee: TypedContractMethod<
    [newFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUserRegistry: TypedContractMethod<
    [_userRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userRegistry: TypedContractMethod<[], [string], "view">;

  withdrawEarnings: TypedContractMethod<[], [void], "nonpayable">;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agentEarnings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositFunds"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "escrowBalances"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAgentEarnings"
  ): TypedContractMethod<[agent: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEscrowBalance"
  ): TypedContractMethod<[jobId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingPayments"
  ): TypedContractMethod<[agent: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlatformFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "paymentsReleased"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingPayments"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundPayment"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releasePayment"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setJobRegistry"
  ): TypedContractMethod<[_jobRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[newFeeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserRegistry"
  ): TypedContractMethod<[_userRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawEarnings"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EarningsWithdrawn"
  ): TypedContractEvent<
    EarningsWithdrawnEvent.InputTuple,
    EarningsWithdrawnEvent.OutputTuple,
    EarningsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentRefunded"
  ): TypedContractEvent<
    PaymentRefundedEvent.InputTuple,
    PaymentRefundedEvent.OutputTuple,
    PaymentRefundedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReleased"
  ): TypedContractEvent<
    PaymentReleasedEvent.InputTuple,
    PaymentReleasedEvent.OutputTuple,
    PaymentReleasedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeCollected"
  ): TypedContractEvent<
    PlatformFeeCollectedEvent.InputTuple,
    PlatformFeeCollectedEvent.OutputTuple,
    PlatformFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EarningsWithdrawn(address,uint256)": TypedContractEvent<
      EarningsWithdrawnEvent.InputTuple,
      EarningsWithdrawnEvent.OutputTuple,
      EarningsWithdrawnEvent.OutputObject
    >;
    EarningsWithdrawn: TypedContractEvent<
      EarningsWithdrawnEvent.InputTuple,
      EarningsWithdrawnEvent.OutputTuple,
      EarningsWithdrawnEvent.OutputObject
    >;

    "FundsDeposited(uint256,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PaymentRefunded(uint256,address,uint256)": TypedContractEvent<
      PaymentRefundedEvent.InputTuple,
      PaymentRefundedEvent.OutputTuple,
      PaymentRefundedEvent.OutputObject
    >;
    PaymentRefunded: TypedContractEvent<
      PaymentRefundedEvent.InputTuple,
      PaymentRefundedEvent.OutputTuple,
      PaymentRefundedEvent.OutputObject
    >;

    "PaymentReleased(uint256,address,uint256)": TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;
    PaymentReleased: TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;

    "PlatformFeeCollected(uint256,uint256)": TypedContractEvent<
      PlatformFeeCollectedEvent.InputTuple,
      PlatformFeeCollectedEvent.OutputTuple,
      PlatformFeeCollectedEvent.OutputObject
    >;
    PlatformFeeCollected: TypedContractEvent<
      PlatformFeeCollectedEvent.InputTuple,
      PlatformFeeCollectedEvent.OutputTuple,
      PlatformFeeCollectedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
