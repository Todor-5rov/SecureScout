/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace RatingRegistry {
  export type ReviewStruct = {
    reviewer: AddressLike;
    reviewee: AddressLike;
    jobId: BigNumberish;
    rating: BigNumberish;
    comment: string;
    timestamp: BigNumberish;
  };

  export type ReviewStructOutput = [
    reviewer: string,
    reviewee: string,
    jobId: bigint,
    rating: bigint,
    comment: string,
    timestamp: bigint
  ] & {
    reviewer: string;
    reviewee: string;
    jobId: bigint;
    rating: bigint;
    comment: string;
    timestamp: bigint;
  };
}

export interface RatingRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAgentRating"
      | "getJobReviews"
      | "getReview"
      | "getScoutRating"
      | "getUserReviewsPaginated"
      | "jobRegistry"
      | "owner"
      | "pause"
      | "paused"
      | "rateAgent"
      | "rateScout"
      | "renounceOwnership"
      | "reviews"
      | "setJobRegistry"
      | "setUserRegistry"
      | "transferOwnership"
      | "unpause"
      | "updateReview"
      | "userRatingCount"
      | "userRegistry"
      | "userReviewCount"
      | "userReviews"
      | "userTotalRatings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentRated"
      | "OwnershipTransferred"
      | "Paused"
      | "ReviewUpdated"
      | "ScoutRated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAgentRating",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobReviews",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScoutRating",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReviewsPaginated",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jobRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateAgent",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rateScout",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviews",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setJobRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateReview",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRatingCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userReviewCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userReviews",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalRatings",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAgentRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReview", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getScoutRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReviewsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateScout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setJobRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRatingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReviewCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalRatings",
    data: BytesLike
  ): Result;
}

export namespace AgentRatedEvent {
  export type InputTuple = [
    agent: AddressLike,
    jobId: BigNumberish,
    rating: BigNumberish
  ];
  export type OutputTuple = [agent: string, jobId: bigint, rating: bigint];
  export interface OutputObject {
    agent: string;
    jobId: bigint;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewUpdatedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    reviewer: AddressLike,
    reviewee: AddressLike
  ];
  export type OutputTuple = [jobId: bigint, reviewer: string, reviewee: string];
  export interface OutputObject {
    jobId: bigint;
    reviewer: string;
    reviewee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoutRatedEvent {
  export type InputTuple = [
    scout: AddressLike,
    jobId: BigNumberish,
    rating: BigNumberish
  ];
  export type OutputTuple = [scout: string, jobId: bigint, rating: bigint];
  export interface OutputObject {
    scout: string;
    jobId: bigint;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RatingRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): RatingRegistry;
  waitForDeployment(): Promise<this>;

  interface: RatingRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAgentRating: TypedContractMethod<
    [agent: AddressLike],
    [[bigint, bigint] & { averageRating: bigint; totalRatings: bigint }],
    "view"
  >;

  getJobReviews: TypedContractMethod<
    [jobId: BigNumberish],
    [RatingRegistry.ReviewStructOutput],
    "view"
  >;

  getReview: TypedContractMethod<
    [jobId: BigNumberish],
    [RatingRegistry.ReviewStructOutput],
    "view"
  >;

  getScoutRating: TypedContractMethod<
    [scout: AddressLike],
    [[bigint, bigint] & { averageRating: bigint; totalRatings: bigint }],
    "view"
  >;

  getUserReviewsPaginated: TypedContractMethod<
    [user: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { reviewJobIds: bigint[]; totalCount: bigint }],
    "view"
  >;

  jobRegistry: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  rateAgent: TypedContractMethod<
    [jobId: BigNumberish, rating: BigNumberish, review: string],
    [void],
    "nonpayable"
  >;

  rateScout: TypedContractMethod<
    [jobId: BigNumberish, rating: BigNumberish, review: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reviews: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint] & {
        reviewer: string;
        reviewee: string;
        jobId: bigint;
        rating: bigint;
        comment: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  setJobRegistry: TypedContractMethod<
    [_jobRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  setUserRegistry: TypedContractMethod<
    [_userRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateReview: TypedContractMethod<
    [jobId: BigNumberish, newRating: BigNumberish, newComment: string],
    [void],
    "nonpayable"
  >;

  userRatingCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userRegistry: TypedContractMethod<[], [string], "view">;

  userReviewCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userReviews: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userTotalRatings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAgentRating"
  ): TypedContractMethod<
    [agent: AddressLike],
    [[bigint, bigint] & { averageRating: bigint; totalRatings: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobReviews"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [RatingRegistry.ReviewStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReview"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [RatingRegistry.ReviewStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getScoutRating"
  ): TypedContractMethod<
    [scout: AddressLike],
    [[bigint, bigint] & { averageRating: bigint; totalRatings: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserReviewsPaginated"
  ): TypedContractMethod<
    [user: AddressLike, startIndex: BigNumberish, count: BigNumberish],
    [[bigint[], bigint] & { reviewJobIds: bigint[]; totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rateAgent"
  ): TypedContractMethod<
    [jobId: BigNumberish, rating: BigNumberish, review: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rateScout"
  ): TypedContractMethod<
    [jobId: BigNumberish, rating: BigNumberish, review: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reviews"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint] & {
        reviewer: string;
        reviewee: string;
        jobId: bigint;
        rating: bigint;
        comment: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setJobRegistry"
  ): TypedContractMethod<[_jobRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserRegistry"
  ): TypedContractMethod<[_userRegistry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReview"
  ): TypedContractMethod<
    [jobId: BigNumberish, newRating: BigNumberish, newComment: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRatingCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userReviewCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userReviews"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTotalRatings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "AgentRated"
  ): TypedContractEvent<
    AgentRatedEvent.InputTuple,
    AgentRatedEvent.OutputTuple,
    AgentRatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewUpdated"
  ): TypedContractEvent<
    ReviewUpdatedEvent.InputTuple,
    ReviewUpdatedEvent.OutputTuple,
    ReviewUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ScoutRated"
  ): TypedContractEvent<
    ScoutRatedEvent.InputTuple,
    ScoutRatedEvent.OutputTuple,
    ScoutRatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AgentRated(address,uint256,uint8)": TypedContractEvent<
      AgentRatedEvent.InputTuple,
      AgentRatedEvent.OutputTuple,
      AgentRatedEvent.OutputObject
    >;
    AgentRated: TypedContractEvent<
      AgentRatedEvent.InputTuple,
      AgentRatedEvent.OutputTuple,
      AgentRatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReviewUpdated(uint256,address,address)": TypedContractEvent<
      ReviewUpdatedEvent.InputTuple,
      ReviewUpdatedEvent.OutputTuple,
      ReviewUpdatedEvent.OutputObject
    >;
    ReviewUpdated: TypedContractEvent<
      ReviewUpdatedEvent.InputTuple,
      ReviewUpdatedEvent.OutputTuple,
      ReviewUpdatedEvent.OutputObject
    >;

    "ScoutRated(address,uint256,uint8)": TypedContractEvent<
      ScoutRatedEvent.InputTuple,
      ScoutRatedEvent.OutputTuple,
      ScoutRatedEvent.OutputObject
    >;
    ScoutRated: TypedContractEvent<
      ScoutRatedEvent.InputTuple,
      ScoutRatedEvent.OutputTuple,
      ScoutRatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
