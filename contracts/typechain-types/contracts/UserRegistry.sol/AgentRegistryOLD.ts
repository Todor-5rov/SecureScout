/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AgentRegistryOLD {
  export type AgentProfileStruct = {
    agent: AddressLike;
    platform: string;
    price: BigNumberish;
    location: string;
    avatar: string;
    description: string;
  };

  export type AgentProfileStructOutput = [
    agent: string,
    platform: string,
    price: bigint,
    location: string,
    avatar: string,
    description: string
  ] & {
    agent: string;
    platform: string;
    price: bigint;
    location: string;
    avatar: string;
    description: string;
  };
}

export interface AgentRegistryOLDInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agentList"
      | "agents"
      | "getAgentProfile"
      | "registerAsAgent"
      | "updateAgentProfile"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AgentProfileUpdated" | "Registered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agentList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "agents", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getAgentProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsAgent",
    values: [string, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgentProfile",
    values: [string, BigNumberish, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "agentList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "agents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAgentProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgentProfile",
    data: BytesLike
  ): Result;
}

export namespace AgentProfileUpdatedEvent {
  export type InputTuple = [
    agent: AddressLike,
    profile: AgentRegistryOLD.AgentProfileStruct
  ];
  export type OutputTuple = [
    agent: string,
    profile: AgentRegistryOLD.AgentProfileStructOutput
  ];
  export interface OutputObject {
    agent: string;
    profile: AgentRegistryOLD.AgentProfileStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredEvent {
  export type InputTuple = [agent: AddressLike];
  export type OutputTuple = [agent: string];
  export interface OutputObject {
    agent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgentRegistryOLD extends BaseContract {
  connect(runner?: ContractRunner | null): AgentRegistryOLD;
  waitForDeployment(): Promise<this>;

  interface: AgentRegistryOLDInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agentList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  agents: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, string, string, string] & {
        agent: string;
        platform: string;
        price: bigint;
        location: string;
        avatar: string;
        description: string;
      }
    ],
    "view"
  >;

  getAgentProfile: TypedContractMethod<
    [agent: AddressLike],
    [AgentRegistryOLD.AgentProfileStructOutput],
    "view"
  >;

  registerAsAgent: TypedContractMethod<
    [
      platform: string,
      price: BigNumberish,
      location: string,
      avatar: string,
      description: string
    ],
    [void],
    "nonpayable"
  >;

  updateAgentProfile: TypedContractMethod<
    [
      platform: string,
      price: BigNumberish,
      location: string,
      avatar: string,
      description: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agentList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "agents"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, string, string, string] & {
        agent: string;
        platform: string;
        price: bigint;
        location: string;
        avatar: string;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentProfile"
  ): TypedContractMethod<
    [agent: AddressLike],
    [AgentRegistryOLD.AgentProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerAsAgent"
  ): TypedContractMethod<
    [
      platform: string,
      price: BigNumberish,
      location: string,
      avatar: string,
      description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAgentProfile"
  ): TypedContractMethod<
    [
      platform: string,
      price: BigNumberish,
      location: string,
      avatar: string,
      description: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AgentProfileUpdated"
  ): TypedContractEvent<
    AgentProfileUpdatedEvent.InputTuple,
    AgentProfileUpdatedEvent.OutputTuple,
    AgentProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;

  filters: {
    "AgentProfileUpdated(address,tuple)": TypedContractEvent<
      AgentProfileUpdatedEvent.InputTuple,
      AgentProfileUpdatedEvent.OutputTuple,
      AgentProfileUpdatedEvent.OutputObject
    >;
    AgentProfileUpdated: TypedContractEvent<
      AgentProfileUpdatedEvent.InputTuple,
      AgentProfileUpdatedEvent.OutputTuple,
      AgentProfileUpdatedEvent.OutputObject
    >;

    "Registered(address)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
  };
}
