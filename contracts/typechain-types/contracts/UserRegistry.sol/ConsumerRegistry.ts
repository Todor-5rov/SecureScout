/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ConsumerRegistry {
  export type ConsumerProfileStruct = {
    consumer: AddressLike;
    name: string;
    avatar: string;
  };

  export type ConsumerProfileStructOutput = [
    consumer: string,
    name: string,
    avatar: string
  ] & { consumer: string; name: string; avatar: string };
}

export interface ConsumerRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "consumerList"
      | "consumers"
      | "getConsumerProfile"
      | "registerAsConsumer"
      | "updateConsumerProfile"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ConsumerProfileUpdated" | "Registered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "consumerList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consumers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsumerProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsConsumer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConsumerProfile",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "consumerList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consumers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConsumerProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConsumerProfile",
    data: BytesLike
  ): Result;
}

export namespace ConsumerProfileUpdatedEvent {
  export type InputTuple = [
    consumer: AddressLike,
    profile: ConsumerRegistry.ConsumerProfileStruct
  ];
  export type OutputTuple = [
    consumer: string,
    profile: ConsumerRegistry.ConsumerProfileStructOutput
  ];
  export interface OutputObject {
    consumer: string;
    profile: ConsumerRegistry.ConsumerProfileStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredEvent {
  export type InputTuple = [consumer: AddressLike];
  export type OutputTuple = [consumer: string];
  export interface OutputObject {
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConsumerRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ConsumerRegistry;
  waitForDeployment(): Promise<this>;

  interface: ConsumerRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  consumerList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  consumers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string] & {
        consumer: string;
        name: string;
        avatar: string;
      }
    ],
    "view"
  >;

  getConsumerProfile: TypedContractMethod<
    [consumer: AddressLike],
    [ConsumerRegistry.ConsumerProfileStructOutput],
    "view"
  >;

  registerAsConsumer: TypedContractMethod<
    [name: string, avatar: string],
    [void],
    "nonpayable"
  >;

  updateConsumerProfile: TypedContractMethod<
    [name: string, avatar: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "consumerList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "consumers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string] & {
        consumer: string;
        name: string;
        avatar: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConsumerProfile"
  ): TypedContractMethod<
    [consumer: AddressLike],
    [ConsumerRegistry.ConsumerProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerAsConsumer"
  ): TypedContractMethod<[name: string, avatar: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConsumerProfile"
  ): TypedContractMethod<[name: string, avatar: string], [void], "nonpayable">;

  getEvent(
    key: "ConsumerProfileUpdated"
  ): TypedContractEvent<
    ConsumerProfileUpdatedEvent.InputTuple,
    ConsumerProfileUpdatedEvent.OutputTuple,
    ConsumerProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;

  filters: {
    "ConsumerProfileUpdated(address,tuple)": TypedContractEvent<
      ConsumerProfileUpdatedEvent.InputTuple,
      ConsumerProfileUpdatedEvent.OutputTuple,
      ConsumerProfileUpdatedEvent.OutputObject
    >;
    ConsumerProfileUpdated: TypedContractEvent<
      ConsumerProfileUpdatedEvent.InputTuple,
      ConsumerProfileUpdatedEvent.OutputTuple,
      ConsumerProfileUpdatedEvent.OutputObject
    >;

    "Registered(address)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
  };
}
